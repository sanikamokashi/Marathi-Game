// Expanded data for the game: Marathi letters, their corresponding words, and emojis
const allGameData = [
    // Primary list (used by Level 2)
    { letter: 'рдХ', wordMarathi: 'рдХрдк', englishWord: 'cup', emoji: 'тШХ', audioText: 'рдХрдк' },
    { letter: 'рдо', wordMarathi: 'рдорд╛рд╕рд╛', englishWord: 'masa', emoji: 'ЁЯРа', audioText: 'рдорд╛рд╕рд╛' },
    { letter: 'рдк', wordMarathi: 'рдкрддрдВрдЧ', englishWord: 'patang', emoji: 'ЁЯкБ', audioText: 'рдкрддрдВрдЧ' },
    { letter: 'рдм', wordMarathi: 'рдмрджрдХ', englishWord: 'badak', emoji: 'ЁЯжЖ', audioText: 'рдмрджрдХ' },
    { letter: 'рд▓', wordMarathi: 'рд▓рд╕реВрдг', englishWord: 'lasoon', emoji: 'ЁЯзД', audioText: 'рд▓рд╕реВрдг' },
    { letter: 'рдЪ', wordMarathi: 'рдЪрдордЪрд╛', englishWord: 'chamcha', emoji: 'ЁЯеД', audioText: 'рдЪрдордЪрд╛' },
    { letter: 'рдЯ', wordMarathi: 'рдЯреЛрдкреА', englishWord: 'topi', emoji: 'ЁЯзв', audioText: 'рдЯреЛрдкреА' },
    { letter: 'рдб', wordMarathi: 'рдбреЛрдВрдЧрд░', englishWord: 'dongar', emoji: 'тЫ░я╕П', audioText: 'рдбреЛрдВрдЧрд░' },
    { letter: 'рдд', wordMarathi: 'рддрд▓рд╡рд╛рд░', englishWord: 'talwar', emoji: 'тЪФя╕П', audioText: 'рддрд▓war' },
    { letter: 'рди', wordMarathi: 'рдирд│', englishWord: 'nal', emoji: 'ЁЯЪ░', audioText: 'рдирд│' },
    { letter: 'рдл', wordMarathi: 'рдлреБрд▓', englishWord: 'phool', emoji: 'ЁЯМ╕', audioText: 'рдлреБрд▓' },
    { letter: 'рдЧ', wordMarathi: 'рдЧрд╛рдЬрд░', englishWord: 'gajar', emoji: 'ЁЯеХ', audioText: 'рдЧрд╛рдЬрд░' },
    { letter: 'рдШ', wordMarathi: 'рдШрд░', englishWord: 'ghar', emoji: 'ЁЯПа', audioText: 'рдШрд░' },
    { letter: 'рдЭ', wordMarathi: 'рдЭреЗрдВрдбрд╛', englishWord: 'jhenda', emoji: 'ЁЯЪй', audioText: 'рдЭреЗрдВрдбрд╛' },
    { letter: 'рдв', wordMarathi: 'рдврдЧ', englishWord: 'dhag', emoji: 'тШБя╕П', audioText: 'рдврдЧ' },
    { letter: 'рде', wordMarathi: 'рдерд░реНрдореЛрдореАрдЯрд░', englishWord: 'thermometer', emoji: 'ЁЯМбя╕П', audioText: 'рдерд░реНрдореЛрдореАрдЯрд░' },
    { letter: 'рдз', wordMarathi: 'рдзрдиреБрд╖реНрдп', englishWord: 'dhanushya', emoji: 'ЁЯП╣', audioText: 'рдзрдиреБрд╖реНрдп' },
    { letter: 'рд╡', wordMarathi: 'рд╡рд╛рдШ', englishWord: 'wagh', emoji: 'ЁЯРЕ', audioText: 'рд╡рд╛рдШ' },
    { letter: 'рд╢', wordMarathi: 'рд╢рдВрдЦ', englishWord: 'shankh', emoji: 'ЁЯРЪ', audioText: 'рд╢рдВрдЦ' },
    { letter: 'рд╕', wordMarathi: 'рд╕рд╕рд╛', englishWord: 'sasa', emoji: 'ЁЯРЗ', audioText: 'рд╕рд╕рд╛' },
    { letter: 'рд╣', wordMarathi: 'рд╣рд╛рдд', englishWord: 'haat', emoji: 'тЬЛ', audioText: 'рд╣рд╛рдд' },

    // New/Updated entries in primary list
    { letter: 'рдЦ', wordMarathi: 'рдЦрдбреВ', englishWord: 'khadu', emoji: 'ЁЯЦНя╕П', audioText: 'рдЦрдбреВ' },
    { letter: 'рдЫ', wordMarathi: 'рдЫрддреНрд░реА', englishWord: 'chhatri', emoji: 'тШВя╕П', audioText: 'рдЫрддреНрд░реА' },
    { letter: 'рда', wordMarathi: 'рдареЛрдХрд│рд╛', englishWord: 'thokla', emoji: 'ЁЯз▒', audioText: 'рдареЛрдХрд│рд╛' },
    { letter: 'рдп', wordMarathi: 'рдпрдВрддреНрд░', englishWord: 'yantra', emoji: 'тЪЩя╕П', audioText: 'рдпрдВрддреНрд░' },

    // Secondary list (added for randomization)
    { letter: 'рдХ', wordMarathi: 'рдХрдорд│', englishWord: 'kamal', emoji: 'ЁЯк╖', audioText: 'рдХрдорд│' },
    { letter: 'рдо', wordMarathi: 'рдордЧрд░', englishWord: 'magar', emoji: 'ЁЯРК', audioText: 'рдордЧрд░' },
    { letter: 'рдк', wordMarathi: 'рдкреЗрд░реВ', englishWord: 'peru', emoji: 'ЁЯНР', audioText: 'рдкреЗрд░реВ' },
    { letter: 'рдм', wordMarathi: 'рдмрд╕', englishWord: 'bus', emoji: 'ЁЯЪМ', audioText: 'рдмрд╕' },
    { letter: 'рд▓', wordMarathi: 'рд▓рд╛рд▓', englishWord: 'lal', emoji: 'ЁЯФ┤', audioText: 'рд▓рд╛рд▓' },
    { letter: 'рдЪ', wordMarathi: 'рдЪрд┐рдордгреА', englishWord: 'chimni', emoji: 'ЁЯРж', audioText: 'рдЪрд┐рдордгреА' },
    { letter: 'рдЯ', wordMarathi: 'рдЯреЛрдореЕрдЯреЛ', englishWord: 'tomato', emoji: 'ЁЯНЕ', audioText: 'рдЯреЛрдореЕрдЯреЛ' },
    { letter: 'рдб', wordMarathi: 'рдбрдмрд╛', englishWord: 'daba', emoji: 'ЁЯУж', audioText: 'рдбрдмрд╛' },
    { letter: 'рдд', wordMarathi: 'рддрд░рд╛рдЬреВ', englishWord: 'taraju', emoji: 'тЪЦя╕П', audioText: 'рддрд░рд╛рдЬреВ' },
    { letter: 'рди', wordMarathi: 'рдирд╛рд░рд│', englishWord: 'naral', emoji: 'ЁЯее', audioText: 'рдирд╛рд░рд│' },
    { letter: 'рдл', wordMarathi: 'рдлрд│рд╛', englishWord: 'phala', emoji: 'ЁЯУЭ', audioText: 'рдлрд│рд╛' },
    { letter: 'рдЧ', wordMarathi: 'рдЧрд╛рдЬрд░', englishWord: 'gajar', emoji: 'ЁЯеХ', audioText: 'рдЧрд╛рдЬрд░' },
    { letter: 'рдШ', wordMarathi: 'рдШрдбреНрдпрд╛рд│', englishWord: 'ghadyal', emoji: 'тП░', audioText: 'рдШрдбреНрдпрд╛рд│' },
    { letter: 'рдЭ', wordMarathi: 'рдЭрд╛рдб', englishWord: 'zhad', emoji: 'ЁЯМ│', audioText: 'рдЭрд╛рдб' },
    { letter: 'рдв', wordMarathi: 'рдвреЛрд▓', englishWord: 'dhol', emoji: 'ЁЯкШ', audioText: 'рдвреЛрд▓' },
    { letter: 'рде', wordMarathi: 'рдерд╛рд│реА', englishWord: 'thali', emoji: 'ЁЯН╜я╕П', audioText: 'рдерд╛рд│реА' },
    { letter: 'рдз', wordMarathi: 'рдзрд╛рдиреНрдп', englishWord: 'dhanya', emoji: 'ЁЯМ╛', audioText: 'рдзрд╛рдиреНрдп' },
    { letter: 'рд╡', wordMarathi: 'рд╡рд╛рдШ', englishWord: 'wagh', emoji: 'ЁЯРЕ', audioText: 'рд╡рд╛рдШ' },
    { letter: 'рд╢', wordMarathi: 'рд╢рдВрдЦ', englishWord: 'shankh', emoji: 'ЁЯРЪ', audioText: 'рд╢рдВрдЦ' },
    { letter: 'рд╕', wordMarathi: 'рд╕рд╕рд╛', englishWord: 'sasa', emoji: 'ЁЯРЗ', audioText: 'рд╕рд╕рд╛' },
    { letter: 'рд╣', wordMarathi: 'рд╣рддреНрддреА', englishWord: 'hatti', emoji: 'ЁЯРШ', audioText: 'рд╣рддреНрддреА' },
    // New secondary entries
    { letter: 'рдЦ', wordMarathi: 'рдЦрд░реЗрджреА', englishWord: 'kharedi', emoji: 'ЁЯЫНя╕П', audioText: 'рдЦрд░реЗрджреА' },
    { letter: 'рдЫ', wordMarathi: 'рдЫрдбреА', englishWord: 'chhadi', emoji: 'ЁЯжп', audioText: 'рдЫрдбреА' },
    { letter: 'рда', wordMarathi: 'рдареЗрдЪ', englishWord: 'thech', emoji: 'ЁЯй╣', audioText: 'рдареЗрдЪ' },
    { letter: 'рдп', wordMarathi: 'рдпрд╛рджреА', englishWord: 'yadi', emoji: 'ЁЯУЛ', audioText: 'рдпрд╛рджреА' }
];

// --- Level 1 Specific Data ---
const level1AlphabetData = [
    // Row 1: Ka Varg
    [
        { letter: 'рдХ', soundText: 'рдХ', words: [
            { wordMarathi: 'рдХрдк', englishWord: 'cup', emoji: 'тШХ', audioText: 'рдХрдк' },
            { wordMarathi: 'рдХрдорд│', englishWord: 'kamal', emoji: 'ЁЯк╖', audioText: 'рдХрдорд│' },
            { wordMarathi: 'рдХрдгреАрд╕', englishWord: 'kanis', emoji: 'ЁЯМ╜', audioText: 'рдХрдгреАрд╕' }
        ]},
        { letter: 'рдЦ', soundText: 'рдЦ', words: [
            { wordMarathi: 'рдЦрдбреВ', englishWord: 'khadu', emoji: 'ЁЯЦНя╕П', audioText: 'рдЦрдбреВ' },
            { wordMarathi: 'рдЦрд░реЗрджреА', englishWord: 'kharedi', emoji: 'ЁЯЫНя╕П', audioText: 'рдЦрд░реЗрджреА' },
            { wordMarathi: 'рдЦрд┐рдбрдХреА', englishWord: 'khidki', emoji: 'ЁЯкЯ', audioText: 'khidki' }
        ]},
        { letter: 'рдЧ', soundText: 'рдЧ', words: [
            { wordMarathi: 'рдЧрд╛рдЬрд░', englishWord: 'gajar', emoji: 'ЁЯеХ', audioText: 'рдЧрд╛рдЬрд░' },
            { wordMarathi: 'рдЧрд╡рдд', englishWord: 'gavat', emoji: 'ЁЯМ▒', audioText: 'рдЧрд╡рдд' },
            { wordMarathi: 'рдЧрд╛рдврд╡', englishWord: 'gadhav', emoji: 'ЁЯлП', audioText: 'рдЧрд╛рдврд╡' }
        ]},
        { letter: 'рдШ', soundText: 'рдШ', words: [
            { wordMarathi: 'рдШрд░', englishWord: 'ghar', emoji: 'ЁЯПа', audioText: 'рдШрд░' },
            { wordMarathi: 'рдШрдбреНрдпрд╛рд│', englishWord: 'ghadyal', emoji: 'тП░', audioText: 'рдШрдбреНрдпрд╛рд│' },
            { wordMarathi: 'рдШреЛрдбрд╛', englishWord: 'ghoda', emoji: 'ЁЯРО', audioText: 'рдШреЛрдбрд╛' }
        ]}
    ],
    // Row 2: Cha Varg
    [
        { letter: 'рдЪ', soundText: 'рдЪ', words: [
            { wordMarathi: 'рдЪрдордЪрд╛', englishWord: 'chamcha', emoji: 'ЁЯеД', audioText: 'рдЪрдордЪрд╛' },
            { wordMarathi: 'рдЪрд┐рдордгреА', englishWord: 'chimni', emoji: 'ЁЯРж', audioText: 'рдЪрд┐рдордгреА' },
            { wordMarathi: 'рдЪрдХреНрд░', englishWord: 'chakra', emoji: 'тШ╕я╕П', audioText: 'рдЪрдХреНрд░' }
        ]},
        { letter: 'рдЫ', soundText: 'рдЫ', words: [
            { wordMarathi: 'рдЫрддреНрд░реА', englishWord: 'chhatri', emoji: 'тШВя╕П', audioText: 'рдЫрддреНрд░реА' },
            { wordMarathi: 'рдЫрдбреА', englishWord: 'chhadi', emoji: 'ЁЯжп', audioText: 'рдЫрдбреА' },
            { wordMarathi: 'рдЫрд╛рди', englishWord: 'chhan', emoji: 'ЁЯСН', audioText: 'рдЫрд╛рди' }
        ]},
        { letter: 'рдЬ', soundText: 'рдЬ', words: [
            { wordMarathi: 'рдЬрд╣рд╛рдЬ', englishWord: 'jahaj', emoji: 'ЁЯЪв', audioText: 'рдЬрд╣рд╛рдЬ' },
            { wordMarathi: 'рдЬрд╛рдВрднреВрд│', englishWord: 'jambhul', emoji: 'ЁЯНЗ', audioText: 'рдЬрд╛рдВрднреВрд│' },
            { wordMarathi: 'рдЬрдВрдЧрд▓', englishWord: 'jangal', emoji: 'ЁЯПЮя╕П', audioText: 'рдЬрдВрдЧрд▓' }
        ]},
        { letter: 'рдЭ', soundText: 'рдЭ', words: [
            { wordMarathi: 'рдЭреЗрдВрдбрд╛', englishWord: 'jhenda', emoji: 'ЁЯЪй', audioText: 'рдЭреЗрдВрдбрд╛' },
            { wordMarathi: 'рдЭрд╛рдб', englishWord: 'zhad', emoji: 'ЁЯМ▓', audioText: 'рдЭрд╛рдб' },
            { wordMarathi: 'рдЭреЗрдмреНрд░рд╛', englishWord: 'zebra', emoji: 'ЁЯжУ', audioText: 'рдЭреЗрдмреНрд░рд╛' }
        ]}
    ],
    // Row 3: Ta Varg
    [
        { letter: 'рдЯ', soundText: 'рдЯ', words: [
            { wordMarathi: 'рдЯреЛрдкреА', englishWord: 'topi', emoji: 'ЁЯзв', audioText: 'рдЯреЛрдкреА' },
            { wordMarathi: 'рдЯреЛрдореЕрдЯреЛ', englishWord: 'tomato', emoji: 'ЁЯНЕ', audioText: 'рдЯреЛрдореЕрдЯреЛ' },
            { wordMarathi: 'рдЯрдкрд╛рд▓', englishWord: 'tapal', emoji: 'тЬЙя╕П', audioText: 'рдЯрдкрд╛рд▓' }
        ]},
        { letter: 'рда', soundText: 'рда', words: [
            { wordMarathi: 'рдареЛрдХрд│рд╛', englishWord: 'thokla', emoji: 'ЁЯз▒', audioText: 'рдареЛрдХрд│рд╛' },
            { wordMarathi: 'рдареЗрдЪ', englishWord: 'thech', emoji: 'ЁЯй╣', audioText: 'рдареЗрдЪ' },
            { wordMarathi: 'рдард┐рдкрдХрд╛', englishWord: 'thipka', emoji: 'тЪл', audioText: 'рдард┐рдкрдХрд╛' }
        ]},
        { letter: 'рдб', soundText: 'рдб', words: [
            { wordMarathi: 'рдбреЛрдВрдЧрд░', englishWord: 'dongar', emoji: 'тЫ░я╕П', audioText: 'рдбреЛрдВрдЧрд░' },
            { wordMarathi: 'рдбрдмрд╛', englishWord: 'daba', emoji: 'ЁЯУж', audioText: 'рдбрдмрд╛' },
            { wordMarathi: 'рдбрдорд░реВ', englishWord: 'damaru', emoji: 'ЁЯеБ', audioText: 'рдбрдорд░реВ' }
        ]},
        { letter: 'рдв', soundText: 'рдв', words: [
            { wordMarathi: 'рдврдЧ', englishWord: 'dhag', emoji: 'тШБя╕П', audioText: 'рдврдЧ' },
            { wordMarathi: 'рдвреЛрд▓', englishWord: 'dhol', emoji: 'ЁЯкШ', audioText: 'рдвреЛрд▓' },
            { wordMarathi: 'рдврдХрд▓рдгреЗ', englishWord: 'dhakalne', emoji: 'тЮбя╕П', audioText: 'рдврдХрд▓рдгреЗ' }
        ]}
    ],
    // Row 4: Ta Varg
    [
        { letter: 'рдд', soundText: 'рдд', words: [
            { wordMarathi: 'рддрд▓рд╡рд╛рд░', englishWord: 'talwar', emoji: 'тЪФя╕П', audioText: 'рддрд▓рд╡рд╛рд░' },
            { wordMarathi: 'рддрд░рд╛рдЬреВ', englishWord: 'taraju', emoji: 'тЪЦя╕П', audioText: 'рддрд░рд╛рдЬреВ' },
            { wordMarathi: 'рддрд╛рд░рд╛', englishWord: 'tara', emoji: 'тнР', audioText: 'рддрд╛рд░рд╛' }
        ]},
        { letter: 'рде', soundText: 'рде', words: [
            { wordMarathi: 'рдерд░реНрдореЛрдореАрдЯрд░', englishWord: 'thermometer', emoji: 'ЁЯМбя╕П', audioText: 'рдерд░реНрдореЛрдореАрдЯрд░' },
            { wordMarathi: 'рдерд╛рд│реА', englishWord: 'thali', emoji: 'ЁЯН╜я╕П', audioText: 'рдерд╛рд│реА' },
            { wordMarathi: 'рдердВрдбреА', englishWord: 'thandi', emoji: 'ЁЯе╢', audioText: 'рдердВрдбреА' }
        ]},
        { letter: 'рдж', soundText: 'рдж', words: [
            { wordMarathi: 'рджрдЧрдб', englishWord: 'dagad', emoji: 'ЁЯки', audioText: 'рджрдЧрдб' },
            { wordMarathi: 'рджрд╡рд╛рдЦрд╛рдирд╛', englishWord: 'davakhana', emoji: 'ЁЯПе', audioText: 'рджрд╡рд╛рдЦрд╛рдирд╛' },
            { wordMarathi: 'рджрд╣рд╛', englishWord: 'daha', emoji: 'ЁЯФЯ', audioText: 'рджрд╣рд╛' }
        ]},
        { letter: 'рдз', soundText: 'рдз', words: [
            { wordMarathi: 'рдзрдиреБрд╖реНрдп', englishWord: 'dhanushya', emoji: 'ЁЯП╣', audioText: 'рдзрдиреБрд╖реНрдп' },
            { wordMarathi: 'рдзрд╛рдиреНрдп', englishWord: 'dhanya', emoji: 'ЁЯМ╛', audioText: 'рдзрд╛рдиреНрдп' },
            { wordMarathi: 'рдзрд░рдг', englishWord: 'dharan', emoji: 'ЁЯМК', audioText: 'рдзрд░рдг' }
        ]},
        { letter: 'рди', soundText: 'рди', words: [
            { wordMarathi: 'рдирд│', englishWord: 'nal', emoji: 'ЁЯЪ░', audioText: 'рдирд│' },
            { wordMarathi: 'рдирд╛рд░рд│', englishWord: 'naral', emoji: 'ЁЯее', audioText: 'рдирд╛рд░рд│' },
            { wordMarathi: 'рдирджреА', englishWord: 'nadi', emoji: 'ЁЯПЮя╕П', audioText: 'рдирджреА' }
        ]}
    ],
    // Row 5: Pa Varg
    [
        { letter: 'рдк', soundText: 'рдк', words: [
            { wordMarathi: 'рдкрддрдВрдЧ', englishWord: 'patang', emoji: 'ЁЯкБ', audioText: 'рдкрддрдВрдЧ' },
            { wordMarathi: 'рдкреЗрд░реВ', englishWord: 'peru', emoji: 'ЁЯНР', audioText: 'рдкреЗрд░реВ' },
            { wordMarathi: 'рдкрд╛рдКрд╕', englishWord: 'paus', emoji: 'ЁЯМзя╕П', audioText: 'рдкрд╛рдКрд╕' }
        ]},
        { letter: 'рдл', soundText: 'рдл', words: [
            { wordMarathi: 'рдлреБрд▓', englishWord: 'phool', emoji: 'ЁЯМ╕', audioText: 'рдлреБрд▓' },
            { wordMarathi: 'рдлрд│рд╛', englishWord: 'phala', emoji: 'ЁЯУЭ', audioText: 'рдлрд│рд╛' },
            { wordMarathi: 'рдлрдгрд╕', englishWord: 'phanas', emoji: 'ЁЯНИ', audioText: 'рдлрдгрд╕' }
        ]},
        { letter: 'рдм', soundText: 'рдм', words: [
            { wordMarathi: 'рдмрджрдХ', englishWord: 'badak', emoji: 'ЁЯжЖ', audioText: 'рдмрджрдХ' },
            { wordMarathi: 'рдмрд╕', englishWord: 'bus', emoji: 'ЁЯЪМ', audioText: 'рдмрд╕' },
            { wordMarathi: 'рдмреВрдЯ', englishWord: 'boot', emoji: 'ЁЯСЮ', audioText: 'рдмреВрдЯ' }
        ]},
        { letter: 'рдн', soundText: 'рдн', words: [
            { wordMarathi: 'рднрд╛рдЬреА', englishWord: 'bhaji', emoji: 'ЁЯеж', audioText: 'рднрд╛рдЬреА' },
            { wordMarathi: 'рднреЛрдХ', englishWord: 'bhok', emoji: 'ЁЯХ│я╕П', audioText: 'рднреЛрдХ' },
            { wordMarathi: 'рднрд░рдгреА', englishWord: 'bharani', emoji: 'ЁЯз║', audioText: 'рднрд░рдгреА' }
        ]},
        { letter: 'рдо', soundText: 'рдо', words: [
            { wordMarathi: 'рдорд╛рд╕рд╛', englishWord: 'masa', emoji: 'ЁЯРа', audioText: 'рдорд╛рд╕рд╛' },
            { wordMarathi: 'рдордЧрд░', englishWord: 'magar', emoji: 'ЁЯРК', audioText: 'рдордЧрд░' },
            { wordMarathi: 'рдордгреА', englishWord: 'mani', emoji: 'ЁЯУ┐', audioText: 'рдордгреА' }
        ]}
    ],
    // Row 6: Avargiya Vyanjane (selected few)
    [
        { letter: 'рдп', soundText: 'рдп', words: [
            { wordMarathi: 'рдпрдВрддреНрд░', englishWord: 'yantra', emoji: 'тЪЩя╕П', audioText: 'рдпрдВрддреНрд░' },
            { wordMarathi: 'рдпрд╛рджреА', englishWord: 'yadi', emoji: 'ЁЯУЛ', audioText: 'рдпрд╛рджреА' },
            { wordMarathi: 'рдпрд╢', englishWord: 'yash', emoji: 'тЬЕ', audioText: 'рдпрд╢' }
        ]},
        { letter: 'рд░', soundText: 'рд░', words: [
            { wordMarathi: 'рд░рд╛рддреНрд░', englishWord: 'ratra', emoji: 'ЁЯМЩ', audioText: 'рд░рд╛рддреНрд░' },
            { wordMarathi: 'рд░рд╕реНрддрд╛', englishWord: 'rasta', emoji: 'ЁЯЫгя╕П', audioText: 'рд░рд╕реНрддрд╛' },
            { wordMarathi: 'рд░рдВрдЧ', englishWord: 'rang', emoji: 'ЁЯМИ', audioText: 'рд░рдВрдЧ' }
        ]},
        { letter: 'рд▓', soundText: 'рд▓', words: [
            { wordMarathi: 'рд▓рд╕реВрдг', englishWord: 'lasoon', emoji: 'ЁЯзД', audioText: 'рд▓рд╕реВрдг' },
            { wordMarathi: 'рд▓рд╛рд▓', englishWord: 'lal', emoji: 'ЁЯФ┤', audioText: 'рд▓рд╛рд▓' },
            { wordMarathi: 'рд▓рд╛рдбреВ', englishWord: 'ladu', emoji: 'ЁЯНб', audioText: 'рд▓рд╛рдбреВ' }
        ]},
        { letter: 'рд╡', soundText: 'рд╡', words: [
            { wordMarathi: 'рд╡рд╛рдШ', englishWord: 'wagh', emoji: 'ЁЯРЕ', audioText: 'рд╡рд╛рдШ' },
            { wordMarathi: 'рд╡рд░', englishWord: 'var', emoji: 'тмЖя╕П', audioText: 'рд╡рд░' },
            { wordMarathi: 'рд╡рдЬрди', englishWord: 'vajan', emoji: 'тЪЦя╕П', audioText: 'рд╡рдЬрди' }
        ]},
        { letter: 'рд╢', soundText: 'рд╢', words: [
            { wordMarathi: 'рд╢рдВрдЦ', englishWord: 'shankh', emoji: 'ЁЯРЪ', audioText: 'рд╢рдВрдЦ' },
            { wordMarathi: 'рд╢рд░реНрдЯ', englishWord: 'shirt', emoji: 'ЁЯСЪ', audioText: 'рд╢рд░реНрдЯ' },
            { wordMarathi: 'рд╢рд╣рд░', englishWord: 'shahar', emoji: 'ЁЯПЩя╕П', audioText: 'shahar' }
        ]},
        { letter: 'рд╕', soundText: 'рд╕', words: [
            { wordMarathi: 'рд╕рд╕рд╛', englishWord: 'sasa', emoji: 'ЁЯРЗ', audioText: 'рд╕рд╕рд╛' },
            { wordMarathi: 'рд╕рдлрд░рдЪрдВрдж', englishWord: 'safarchand', emoji: 'ЁЯНО', audioText: 'рд╕рдлрд░рдЪрдВрдж' },
            { wordMarathi: 'рд╕реВрд░реНрдп', englishWord: 'surya', emoji: 'тШАя╕П', audioText: 'рд╕реВрд░реНрдп' }
        ]},
        { letter: 'рд╣', soundText: 'рд╣', words: [
            { wordMarathi: 'рд╣рд╛рдд', englishWord: 'haat', emoji: 'тЬЛ', audioText: 'рд╣рд╛рдд' },
            { wordMarathi: 'рд╣рддреНрддреА', englishWord: 'hatti', emoji: 'ЁЯРШ', audioText: 'рд╣рддреНрддреА' },
            { wordMarathi: 'рд╣рд╕реВ', englishWord: 'hasu', emoji: 'ЁЯШД', audioText: 'рд╣рд╕реВ' }
        ]}
    ]
];

// --- Level 3 Specific Data ---
// Expanded and corrected data for Level 3
const level3GameData = [
    {
        correctLetter: 'рдХрд╛',
        wordMarathi: 'рдХрд╛рди',
        englishWord: 'kan', // Transliteration
        emoji: 'ЁЯСВ',
        audioText: 'рдХрд╛рди',
        options: ['рдХрд╛', 'рдХрд┐', 'рдХреБ']
    },
    {
        correctLetter: 'рдореА',
        wordMarathi: 'рдореАрда',
        englishWord: 'mith', // Transliteration
        emoji: 'ЁЯзВ',
        audioText: 'рдореАрда',
        options: ['рдорд╛', 'рдореА', 'рдореВ']
    },
    {
        correctLetter: 'рдкреВ',
        wordMarathi: 'рдкреВрд▓',
        englishWord: 'pul', // Transliteration
        emoji: 'ЁЯМЙ',
        audioText: 'рдкреВрд▓',
        options: ['рдкрд╛', 'рдкреА', 'рдкреВ']
    },
    {
        correctLetter: 'рдЭреЗ',
        wordMarathi: 'рдЭреЗрдмреНрд░рд╛',
        englishWord: 'zebra', // Transliteration
        emoji: 'ЁЯжУ',
        audioText: 'рдЭреЗрдмреНрд░рд╛',
        options: ['рдЭрд╛', 'рдЭреЛ', 'рдЭреЗ']
    },
    {
        correctLetter: 'рдШреЛ',
        wordMarathi: 'рдШреЛрдбрд╛',
        englishWord: 'ghoda', // Transliteration
        emoji: 'ЁЯРО',
        audioText: 'рдШреЛрдбрд╛',
        options: ['рдШрд╛', 'рдШреА', 'рдШреЛ']
    },
    {
        correctLetter: 'рдЪреВ',
        wordMarathi: 'рдЪреВрд│',
        englishWord: 'chul', // Transliteration
        emoji: 'ЁЯТз',
        audioText: 'рдЪреВрд│',
        options: ['рдЪрд╛', 'рдЪреА', 'рдЪреВ']
    },
    {
        correctLetter: 'рдЯреЗ',
        wordMarathi: 'рдЯреЗрдмрд▓',
        englishWord: 'table', // Transliteration
        emoji: 'ЁЯкС', // Changed to actual table/chair emoji
        audioText: 'рдЯреЗрдмрд▓',
        options: ['рдЯрд╛', 'рдЯреА', 'рдЯреЗ']
    },
    {
        correctLetter: 'рдбреЛ',
        wordMarathi: 'рдбреЛрд│рд╛',
        englishWord: 'dola', // Transliteration
        emoji: 'ЁЯСБя╕П',
        audioText: 'рдбреЛрд│рд╛',
        options: ['рдбрд╛', 'рдбреА', 'рдбреЛ']
    },
    {
        correctLetter: 'рдирд╛',
        wordMarathi: 'рдирд╛рд░рд│',
        englishWord: 'naral', // Transliteration
        emoji: 'ЁЯее',
        audioText: 'рдирд╛рд░рд│',
        options: ['рдирд╛', 'рдирд┐', 'рдиреБ']
    },
    {
        correctLetter: 'рдлреВ',
        wordMarathi: 'рдлреВрд▓',
        englishWord: 'phul', // Transliteration
        emoji: 'ЁЯМ║',
        audioText: 'рдлреВрд▓',
        options: ['рдлрд╛', 'рдлрд┐', 'рдлреВ']
    },
    {
        correctLetter: 'рдмрд╛',
        wordMarathi: 'рдмрд╛рд│',
        englishWord: 'bal', // Transliteration
        emoji: 'ЁЯС╢',
        audioText: 'рдмрд╛рд│',
        options: ['рдмрд╛', 'рдмрд┐', 'рдмреБ']
    },
    {
        correctLetter: 'рднреВ',
        wordMarathi: 'рднреВрдЧреЛрд▓',
        englishWord: 'bhugol', // Transliteration
        emoji: 'ЁЯМН',
        audioText: 'рднреВрдЧреЛрд▓',
        options: ['рднрд╛', 'рднрд┐', 'рднреВ']
    },
    {
        correctLetter: 'рдпреЗ',
        wordMarathi: 'рдпреЗрдгреЗ',
        englishWord: 'yene', // Transliteration
        emoji: 'ЁЯЪ╢тАНтЩАя╕П',
        audioText: 'рдпреЗрдгреЗ',
        options: ['рдпрд╛', 'рдпреА', 'рдпреЗ']
    },
    {
        correctLetter: 'рд░реЛ',
        wordMarathi: 'рд░реЛрдЯреА',
        englishWord: 'roti', // Transliteration
        emoji: 'ЁЯНЮ',
        audioText: 'roti',
        options: ['рд░рд╛', 'рд░реА', 'рд░реЛ']
    },
    {
        correctLetter: 'рд▓рд╛',
        wordMarathi: 'рд▓рд╛рдбреВ',
        englishWord: 'ladu', // Transliteration
        emoji: 'ЁЯНб',
        audioText: 'рд▓рд╛рдбреВ',
        options: ['рд▓рд╛', 'рд▓рд┐', 'рд▓реВ']
    },
    {
        correctLetter: 'рд╡рд╛',
        wordMarathi: 'рд╡рд╛рдШ',
        englishWord: 'wagh', // Transliteration
        emoji: 'ЁЯРЕ',
        audioText: 'рд╡рд╛рдШ',
        options: ['рд╡рд╛', 'рд╡рд┐', 'рд╡реВ']
    },
    {
        correctLetter: 'рд╢реА',
        wordMarathi: 'рд╢рд┐рдЯреНрдЯреА',
        englishWord: 'shitti', // Transliteration
        emoji: 'ЁЯО╢',
        audioText: 'рд╢рд┐рдЯреНрдЯреА',
        options: ['рд╢рд╛', 'рд╢рд┐', 'рд╢реА']
    },
    {
        correctLetter: 'рд╕реБ',
        wordMarathi: 'рд╕реБрдИ',
        englishWord: 'sui', // Transliteration
        emoji: 'ЁЯкб',
        audioText: 'рд╕реБрдИ',
        options: ['рд╕рд╛', 'рд╕рд┐', 'рд╕реБ']
    },
    {
        correctLetter: 'рд╣рд╛',
        wordMarathi: 'рд╣рд╛рдд',
        englishWord: 'haat', // Transliteration
        emoji: 'тЬЛ',
        audioText: 'рд╣рд╛рдд',
        options: ['рд╣рд╛', 'рд╣рд┐', 'рд╣реБ']
    },
    // Additional examples for various modifiers
    {
        correctLetter: 'рдХрд┐',
        wordMarathi: 'рдХрд┐рд▓реНрд▓рд╛',
        englishWord: 'killa', // Transliteration
        emoji: 'ЁЯП░',
        audioText: 'рдХрд┐рд▓реНрд▓рд╛',
        options: ['рдХрд╛', 'рдХрд┐', 'рдХреБ']
    },
    {
        correctLetter: 'рд▓рд┐',
        wordMarathi: 'рд▓рд┐рдВрдмреВ',
        englishWord: 'limbu', // Transliteration
        emoji: 'ЁЯНЛ',
        audioText: 'рд▓рд┐рдВрдмреВ',
        options: ['рд▓рд╛', 'рд▓рд┐', 'рд▓реВ']
    },
    {
        correctLetter: 'рдЧреЗ',
        wordMarathi: 'рдЧреЗрд▓рд╛',
        englishWord: 'gela', // Transliteration
        emoji: 'ЁЯЪ╢тАНтЩВя╕П',
        audioText: 'рдЧреЗрд▓рд╛',
        options: ['рдЧрд╛', 'рдЧреА', 'рдЧреЗ']
    },
    {
        correctLetter: 'рдореИ',
        wordMarathi: 'рдореИрджрд╛рди',
        englishWord: 'maidan', // Transliteration
        emoji: 'ЁЯПЯя╕П',
        audioText: 'рдореИрджрд╛рди',
        options: ['рдорд╛', 'рдореА', 'рдореИ']
    },
    {
        correctLetter: 'рдХреЛ',
        wordMarathi: 'рдХреЛрд▓реНрд╣рд╛',
        englishWord: 'kolha', // Transliteration
        emoji: 'ЁЯжК',
        audioText: 'рдХреЛрд▓реНрд╣рд╛',
        options: ['рдХрд╛', 'рдХрд┐', 'рдХреЛ']
    },
    {
        correctLetter: 'рд╢реМ',
        wordMarathi: 'рд╢реМрдЪрд╛рд▓рдп',
        englishWord: 'shauchalay', // Transliteration
        emoji: 'ЁЯЪ╜',
        audioText: 'рд╢реМрдЪрд╛рд▓рдп',
        options: ['рд╢рд╛', 'рд╢рд┐', 'рд╢ou']
    },
    {
        correctLetter: 'рдкрдВ',
        wordMarathi: 'рдкрдВрдЦ',
        englishWord: 'pankh', // Transliteration
        emoji: 'ЁЯк╢',
        audioText: 'рдкрдВрдЦ',
        options: ['рдкрд╛', 'рдкреА', 'рдкрдВ']
    },
    {
        correctLetter: 'рдЕрдВ',
        wordMarathi: 'рдЕрдВрдЧреВрд░',
        englishWord: 'angur', // Transliteration
        emoji: 'ЁЯНЗ',
        audioText: 'рдЕрдВрдЧреВрд░',
        options: ['рдЕ', 'рдЖ', 'рдЕрдВ']
    },
    {
        correctLetter: 'рдЗ',
        wordMarathi: 'рдЗрдорд╛рд░рдд',
        englishWord: 'imarat', // Transliteration
        emoji: 'ЁЯПв',
        audioText: 'рдЗрдорд╛рд░рдд',
        options: ['рдЕ', 'рдЖ', 'рдЗ']
    },
    {
        correctLetter: 'рдК',
        wordMarathi: 'рдКрд╕',
        englishWord: 'us', // Transliteration
        emoji: 'ЁЯМ▒',
        audioText: 'рдКрд╕',
        options: ['рдЕ', 'рдЖ', 'рдК']
    },
    {
        correctLetter: 'рдР',
        wordMarathi: 'рдРрд░рдг',
        englishWord: 'airan', // Transliteration
        emoji: 'ЁЯФи',
        audioText: 'рдРрд░рдг',
        options: ['рдП', 'рдУ', 'рдР']
    },
    {
        correctLetter: 'рдФ',
        wordMarathi: 'рдФрд╖рдз',
        englishWord: 'aushadh', // Transliteration
        emoji: 'ЁЯТК',
        audioText: 'рдФрд╖рдз',
        options: ['рдУ', 'рдЕрдВ', 'рдФ']
    },
    // New additions based on the plan:
    {
        correctLetter: 'рдХрд┐',
        wordMarathi: 'рдХрд┐рдбрд╛',
        englishWord: 'kida',
        emoji: 'ЁЯРЫ',
        audioText: 'рдХрд┐рдбрд╛',
        options: ['рдХрд╛', 'рдХрд┐', 'рдХреВ']
    },
    {
        correctLetter: 'рд╢рд┐',
        wordMarathi: 'рд╢рд┐рд░',
        englishWord: 'shir',
        emoji: 'ЁЯза',
        audioText: 'рд╢рд┐рд░',
        options: ['рд╢рд╛', 'рд╢рд┐', 'рд╢реБ']
    },
    {
        correctLetter: 'рддреА',
        wordMarathi: 'рддреАрд░',
        englishWord: 'teer',
        emoji: 'ЁЯП╣',
        audioText: 'рддреАрд░',
        options: ['рддрд╛', 'рддреА', 'рддреВ']
    },
    {
        correctLetter: 'рдкреА',
        wordMarathi: 'рдкреАрд│',
        englishWord: 'peel',
        emoji: 'ЁЯеи',
        audioText: 'рдкреАрд│',
        options: ['рдкрд╛', 'рдкреА', 'рдкреВ']
    },
    {
        correctLetter: 'рдЦреБ',
        wordMarathi: 'рдЦреБрд░реНрдЪреА',
        englishWord: 'khurchi',
        emoji: 'ЁЯкС',
        audioText: 'рдЦреБрд░реНрдЪреА',
        options: ['рдЦрд╛', 'рдЦрд┐', 'рдЦреБ']
    },
    {
        correctLetter: 'рдкреБ',
        wordMarathi: 'рдкреБрд╕реНрддрдХрд╛рд▓рдп',
        englishWord: 'pustakalay',
        emoji: 'ЁЯУЪ',
        audioText: 'рдкреБрд╕реНрддрдХрд╛рд▓рдп',
        options: ['рдкрд╛', 'рдкрд┐', 'рдкреБ']
    },
    {
        correctLetter: 'рдЭреБ',
        wordMarathi: 'рдЭреБрд▓рд╛',
        englishWord: 'jhula',
        emoji: 'ЁЯОб',
        audioText: 'рдЭреБрд▓рд╛',
        options: ['рдЭрд╛', 'рдЭрд┐', 'рдЭреБ']
    },
    {
        correctLetter: 'рдзреВ',
        wordMarathi: 'рдзреВрдк',
        englishWord: 'dhoop',
        emoji: 'тШАя╕П',
        audioText: 'рдзреВрдк',
        options: ['рдзрд╛', 'рдзрд┐', 'рдзреВ']
    },
    {
        correctLetter: 'рдкреЗ',
        wordMarathi: 'рдкреЗрди',
        englishWord: 'pen',
        emoji: 'ЁЯЦКя╕П',
        audioText: 'рдкреЗрди',
        options: ['рдкрд╛', 'рдкреА', 'рдкреЗ']
    },
    {
        correctLetter: 'рдХреЗ',
        wordMarathi: 'рдХреЗрд│реА',
        englishWord: 'keli',
        emoji: 'ЁЯНМ',
        audioText: 'рдХреЗрд│реА',
        options: ['рдХрд╛', 'рдХрд┐', 'рдХреЗ']
    },
    {
        correctLetter: 'рдкреИ',
        wordMarathi: 'рдкреИрд╕реЗ',
        englishWord: 'paise',
        emoji: 'ЁЯТ░',
        audioText: 'рдкреИрд╕реЗ',
        options: ['рдкрд╛', 'рдкреА', 'рдкреИ']
    },
    {
        correctLetter: 'рд╡реИ',
        wordMarathi: 'рд╡реИрд▓рдг',
        englishWord: 'vailan',
        emoji: 'ЁЯСйтАНЁЯМ╛',
        audioText: 'рд╡реИрд▓рдг',
        options: ['рд╡рд╛', 'рд╡рд┐', 'рд╡реИ']
    },
    {
        correctLetter: 'рдкреЛ',
        wordMarathi: 'рдкреЛрдкрдЯ',
        englishWord: 'popat',
        emoji: 'ЁЯжЬ',
        audioText: 'рдкреЛрдкрдЯ',
        options: ['рдкрд╛', 'рдкреА', 'рдкреЛ']
    },
    {
        correctLetter: 'рдореЛ',
        wordMarathi: 'рдореЛрддреА',
        englishWord: 'moti',
        emoji: 'тЪк',
        audioText: 'рдореЛрддреА',
        options: ['рдорд╛', 'рдореА', 'рдореЛ']
    },
    {
        correctLetter: 'рдХреМ',
        wordMarathi: 'рдХреМрд│рд╛',
        englishWord: 'kaula',
        emoji: 'ЁЯз▒',
        audioText: 'рдХреМрд│рд╛',
        options: ['рдХрд╛', 'рдХрд┐', 'рдХреМ']
    },
    {
        correctLetter: 'рджреМ',
        wordMarathi: 'рджреМрдд',
        englishWord: 'daut',
        emoji: 'ЁЯЦЛя╕П',
        audioText: 'рджреМрдд',
        options: ['рджрд╛', 'рджрд┐', 'рджреМ']
    },
    {
        correctLetter: 'рдХрдВ',
        wordMarathi: 'рдХрдВрдЧрд╡рд╛',
        englishWord: 'kangava',
        emoji: 'ЁЯз┤',
        audioText: 'рдХрдВрдЧрд╡рд╛',
        options: ['рдХрд╛', 'рдХрд┐', 'рдХрдВ']
    },
    {
        correctLetter: 'рдордВ',
        wordMarathi: 'рдордВрджрд┐рд░рд╛',
        englishWord: 'mandira',
        emoji: 'ЁЯЫХ',
        audioText: 'рдордВрджрд┐рд░рд╛',
        options: ['рдорд╛', 'рдореА', 'рдордВ']
    },
    {
        correctLetter: 'рдкреБрдирдГ', // This is a rare case where the full word is the "modifier"
        wordMarathi: 'рдкреБрдирдГ',
        englishWord: 'punaha',
        emoji: 'ЁЯФД',
        audioText: 'рдкреБрдирдГ',
        options: ['рдкреБ', 'рдкреБрди', 'рдкреБрдирдГ'] // Options reflect the full word
    }
];

// DOM elements (declared globally but assigned inside DOMContentLoaded/renderLevel)
let lettersSection; // Used by Level 2
let picturesSection; // Used by Level 2
let feedbackMessage; // Used by Level 2
let resetBtn; // Used by Level 2
let svgElement; // Used by Level 2
let activeLines = []; // Used by Level 2
let levelContentDiv; // Main content area for levels
let levelSelectDropdown; // New: Reference to the dropdown

// --- Level 2 State Variables (Re-initialized on Level 2 load) ---
let selectedLetterElement = null;
let selectedPictureElement = null;
let matchedPairsCount = 0;
let currentGameData = [];

// --- Level 1 State Variables ---
let currentAlphabetRowIndex = 0;
let selectedLetterData = null; // Stores the data object of the currently selected letter in Level 1

// --- Level 3 State Variables ---
let currentLevel3ChallengeIndex = 0; // Will be used as an index into shuffledLevel3GameData
let shuffledLevel3GameData = []; // New: To hold shuffled challenges
let currentLevel3Challenge = null;
let level3FeedbackMessageElement = null;
let level3NextButton = null;
let level3OptionsContainer = null;
let level3PictureDisplay = null;


/**
 * Shuffles an array randomly.
 * @param {Array} array The array to shuffle.
 * @returns {Array} The shuffled array.
 */
function shuffleArray(array) {
    for (let i = array.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [array[i], array[j]] = [array[j], array[i]]; // Swap elements
    }
    return array;
}

/**
 * Selects 5 unique random items from allGameData for Level 2.
 * Ensures unique letters are selected. If a letter has multiple entries,
 * one will be chosen randomly.
 */
function selectRandomGameData() {
    const uniqueLetters = new Set();
    const selectedPairs = [];
    const shuffledAllData = shuffleArray([...allGameData]); // Shuffle a copy of all data

    for (const item of shuffledAllData) {
        if (!uniqueLetters.has(item.letter)) {
            uniqueLetters.add(item.letter);
            selectedPairs.push(item);
            if (selectedPairs.length === 5) {
                break; // Stop once 5 unique letter pairs are found
            }
        }
    }
    currentGameData = selectedPairs;
}

/**
 * Clears any currently selected elements (Level 2 specific).
 */
function clearSelections() {
    if (selectedLetterElement) {
        selectedLetterElement.classList.remove('selected', 'incorrect');
        selectedLetterElement = null;
    }
    if (selectedPictureElement) {
        selectedPictureElement.classList.remove('selected', 'incorrect');
        // Hide English word for the cleared picture
        const englishWordSpan = selectedPictureElement.querySelector('.english-word');
        if (englishWordSpan) {
            englishWordSpan.style.display = 'none';
        }
        selectedPictureElement = null;
    }
    if (feedbackMessage) { // Check if feedbackMessage exists (only in Level 2)
        feedbackMessage.textContent = ''; // Clear feedback when selections are cleared
    }
}

/**
 * Plays the audio for a given Marathi word using SpeechSynthesisUtterance.
 * Includes checks for browser support and voice availability.
 * @param {string} wordText The Marathi word to speak.
 */
function playWordAudio(wordText) {
    console.log('Attempting to play audio for:', wordText);

    if (!('speechSynthesis' in window)) {
        console.error('Speech synthesis not supported in this browser.');
        return;
    }

    const utterance = new SpeechSynthesisUtterance(wordText);
    utterance.rate = 0.8;
    utterance.pitch = 1;
    utterance.volume = 1;

    const setVoiceAndSpeak = () => {
        const voices = speechSynthesis.getVoices();
        console.log('Available voices:', voices.map(v => `${v.name} (${v.lang})`));

        if (voices.length === 0) {
            console.error('No text-to-speech voices available on your system.');
            return; // Stop here if no voices are available
        }

        // Try to find a Marathi voice first
        let chosenVoice = voices.find(voice => voice.lang === 'mr-IN');

        // If no Marathi voice, try to find a Hindi voice
        if (!chosenVoice) {
            chosenVoice = voices.find(voice => voice.lang === 'hi-IN');
            if (chosenVoice) {
                console.warn('Marathi voice (mr-IN) not found. Using Hindi voice (hi-IN) as fallback.');
            } else {
                console.warn('Neither Marathi (mr-IN) nor Hindi (hi-IN) voice found. Attempting to speak with default voice.');
            }
        } else {
            console.log('Marathi voice found and set.');
        }

        if (chosenVoice) {
            utterance.voice = chosenVoice;
            // Set language to the chosen voice's language for better pronunciation if a specific voice is found
            utterance.lang = chosenVoice.lang;
        } else {
            // If no specific voice found, explicitly set lang to Marathi for potential default voice to try
            utterance.lang = 'mr-IN';
        }

        try {
            if (speechSynthesis.speaking) {
                speechSynthesis.cancel();
            }
            speechSynthesis.speak(utterance);
        } catch (error) {
            console.error('Error during speechSynthesis.speak():', error);
        }
    };

    if (speechSynthesis.getVoices().length > 0) {
        setVoiceAndSpeak();
    } else {
        speechSynthesis.onvoiceschanged = () => {
            setVoiceAndSpeak();
            speechSynthesis.onvoiceschanged = null;
        };
    }

    utterance.onerror = (event) => {
        console.error('Speech synthesis error:', event.error);
    };
}

// --- Level 2 Specific Functions ---
/**
 * Handles the click event on a letter box (Level 2).
 * @param {Event} e The click event.
 */
function handleLetterClick(e) {
    const clickedLetter = e.currentTarget;

    // If this letter is already matched, do nothing
    if (clickedLetter.classList.contains('matched')) {
        return;
    }

    // If a picture is already selected, attempt a match with this letter
    if (selectedPictureElement) {
        selectedLetterElement = clickedLetter; // Temporarily select the letter for matching
        selectedLetterElement.classList.add('selected'); // Highlight it
        attemptMatch();
    } else {
        // If no picture is selected, prompt to select a picture first
        feedbackMessage.textContent = 'рдкреНрд░рдердо рдЪрд┐рддреНрд░ рдирд┐рд╡рдбрд╛. (Select a picture first.)';
    }
}

/**
 * Handles the click event on a picture item (Level 2).
 * @param {Event} e The click event.
 */
function handlePictureClick(e) {
    const clickedPicture = e.currentTarget;

    // If this picture is already matched, do nothing
    if (clickedPicture.classList.contains('matched')) {
        return;
    }

    // Play audio for the clicked picture
    // Find the audioText from currentGameData based on the picture's dataset.letter
    const pictureData = currentGameData.find(data => `picture-${data.letter}` === clickedPicture.id);
    if (pictureData) {
        playWordAudio(pictureData.audioText);

        // Show the English word
        const englishWordSpan = clickedPicture.querySelector('.english-word');
        if (englishWordSpan) {
            englishWordSpan.textContent = pictureData.englishWord; // Set text
            englishWordSpan.style.display = 'block'; // Show it
        }
    }

    // Clear any previous picture selection highlight
    if (selectedPictureElement && selectedPictureElement !== clickedPicture) {
        selectedPictureElement.classList.remove('selected', 'incorrect');
        // Hide English word for previously selected picture
        const prevEnglishWordSpan = selectedPictureElement.querySelector('.english-word');
        if (prevEnglishWordSpan) {
            prevEnglishWordSpan.style.display = 'none';
        }
    }

    // Select the new picture
    selectedPictureElement = clickedPicture;
    selectedPictureElement.classList.add('selected');
    feedbackMessage.textContent = 'рдЖрддрд╛ рдЕрдХреНрд╖рд░ рдирд┐рд╡рдбрд╛. (Now select a letter.)';

    // If a letter was already selected, attempt a match (shouldn't happen in this flow unless user clicks picture then letter then another picture)
    if (selectedLetterElement) {
        attemptMatch();
    }
}

/**
 * Attempts to match the currently selected picture and letter (Level 2).
 */
function attemptMatch() {
    if (!selectedPictureElement || !selectedLetterElement) {
        return; // Need both a picture and a letter selected
    }

    const pictureLetter = selectedPictureElement.dataset.letter; // The letter this picture corresponds to
    const letter = selectedLetterElement.textContent;

    if (letter === pictureLetter) {
        // Correct match
        selectedLetterElement.classList.add('correct-match', 'matched');
        selectedPictureElement.classList.add('correct-match', 'matched');
        matchedPairsCount++;
        feedbackMessage.textContent = 'рдмрд░реЛрдмрд░! (Correct!)';

        // Draw the line
        drawLine(selectedPictureElement, selectedLetterElement);


        // Disable further interaction for matched elements
        selectedLetterElement.removeEventListener('click', handleLetterClick);
        selectedPictureElement.removeEventListener('click', handlePictureClick);

        // Check if all pairs are matched
        if (matchedPairsCount === currentGameData.length) {
            feedbackMessage.textContent = 'рдЙрддреНрдХреГрд╖реНрдЯ! рд╕рд░реНрд╡ рдЬреЛрдбреНрдпрд╛ рдЬреБрд│рд▓реНрдпрд╛! (Excellent! All pairs matched!)';
        }

    } else {
        // Incorrect match
        selectedLetterElement.classList.add('incorrect');
        selectedPictureElement.classList.add('incorrect');
        feedbackMessage.textContent = 'рдЪреБрдХреАрдЪреЗ! рдкреБрдиреНрд╣рд╛ рдкреНрд░рдпрддреНрди рдХрд░рд╛. (Incorrect! Try again.)';

        // Briefly show incorrect state, then reset
        setTimeout(() => {
            selectedLetterElement.classList.remove('incorrect', 'selected'); // Remove selected from letter
            selectedLetterElement = null; // Clear letter selection
            selectedPictureElement.classList.remove('incorrect'); // Remove incorrect from picture, but keep selected
            // Hide English word for incorrect match after timeout
            const incorrectEnglishWordSpan = selectedPictureElement.querySelector('.english-word');
            if (incorrectEnglishWordSpan) {
                incorrectEnglishWordSpan.style.display = 'none';
            }
            feedbackMessage.textContent = '';
        }, 800); // Show red for 0.8 seconds
    }
    // Clear selected picture only if it was a correct match, otherwise it stays selected
    if (letter === pictureLetter) {
        clearSelections();
    }
}

/**
 * Draws an SVG line between two DOM elements (Level 2).
 * @param {HTMLElement} element1 The first element (e.g., picture item).
 * @param {HTMLElement} element2 The second element (e.g., letter box).
 */
function drawLine(element1, element2) {
    const svgRect = svgElement.getBoundingClientRect(); // Get SVG's own position

    const rect1 = element1.getBoundingClientRect();
    const rect2 = element2.getBoundingClientRect();

    // Calculate the points for the line to start from the edge, not center
    const x1_viewport = rect1.right; // Right edge of element1
    const y1_viewport = rect1.top + rect1.height / 2; // Vertical center of element1
    const x2_viewport = rect2.left; // Left edge of element2
    const y2_viewport = rect2.top + rect2.height / 2; // Vertical center of element2

    // Convert viewport coordinates to SVG coordinates
    const svgX1 = x1_viewport - svgRect.left;
    const svgY1 = y1_viewport - svgRect.top;
    const svgX2 = x2_viewport - svgRect.left;
    const svgY2 = y2_viewport - svgRect.top;

    console.log(`Drawing line from (${svgX1}, ${svgY1}) to (${svgX2}, ${svgY2})`);

    const line = document.createElementNS("http://www.w3.org/2000/svg", "line");
    line.setAttribute("x1", svgX1);
    line.setAttribute("y1", svgY1);
    line.setAttribute("x2", svgX2);
    line.setAttribute("y2", svgY2);
    svgElement.appendChild(line);
    activeLines.push(line);
}

/**
 * Initializes the game for Level 2.
 */
function initGame() {
    selectRandomGameData(); // Select a new set of data for the current game

    // Clear existing content
    lettersSection.innerHTML = '';
    picturesSection.innerHTML = '';
    feedbackMessage.textContent = '';
    matchedPairsCount = 0;
    clearSelections(); // Ensure no lingering selections
    activeLines.forEach(line => line.remove()); // Remove all previous lines
    activeLines = [];

    // Create letter boxes based on currentGameData
    currentGameData.forEach(data => {
        const letterBox = document.createElement('div');
        letterBox.id = `letter-${data.letter}`;
        letterBox.classList.add('letter-box');
        letterBox.textContent = data.letter;
        letterBox.dataset.correctPictureId = `picture-${data.letter}`;
        letterBox.addEventListener('click', handleLetterClick); // Add click listener
        lettersSection.appendChild(letterBox);
    });

    // Create and shuffle picture items based on currentGameData
    const shuffledPictures = shuffleArray([...currentGameData]);
    shuffledPictures.forEach(data => {
        const pictureItem = document.createElement('div');
        pictureItem.id = `picture-${data.letter}`;
        pictureItem.classList.add('picture-item');
        pictureItem.dataset.letter = data.letter;

        const emojiSpan = document.createElement('span');
        emojiSpan.classList.add('emoji');
        emojiSpan.textContent = data.emoji;
        pictureItem.appendChild(emojiSpan);

        // Add a span for the English word, initially hidden
        const englishWordSpan = document.createElement('span');
        englishWordSpan.classList.add('english-word');
        englishWordSpan.textContent = data.englishWord; // Use the new property
        pictureItem.appendChild(englishWordSpan);

        pictureItem.addEventListener('click', handlePictureClick); // Add click listener
        picturesSection.appendChild(pictureItem);
    });

    // Add event listener for reset button (ensure it's only added once)
    if (!resetBtn.dataset.listenerAttached) {
        resetBtn.addEventListener('click', resetGame);
        resetBtn.dataset.listenerAttached = 'true';
    }
}

/**
 * Resets the game to its initial state (Level 2).
 */
function resetGame() {
    matchedPairsCount = 0; // Reset matched pairs count
    initGame(); // Re-initialize to select new letters and reset everything
}

// --- Level 1 Specific Functions ---

/**
 * Plays the audio for a single Marathi letter.
 * @param {string} letterText The Marathi letter to speak.
 */
function playLetterAudio(letterText) {
    playWordAudio(letterText); // Re-use existing audio function
}

/**
 * Renders the current row of Marathi letters for Level 1.
 */
function renderAlphabetRow() {
    const letterRowDisplay = document.getElementById('letter-row-display');
    letterRowDisplay.innerHTML = ''; // Clear previous letters

    const currentRow = level1AlphabetData[currentAlphabetRowIndex];

    // Ensure selectedLetterData points to the correct object for the current row
    // This handles initial load and navigation
    if (!selectedLetterData || !currentRow.some(item => item.letter === selectedLetterData.letter)) {
        selectedLetterData = currentRow[0]; // Default to the first letter of the current row
    }

    currentRow.forEach((letterData, index) => {
        const letterBox = document.createElement('div');
        letterBox.classList.add('level1-letter-box');
        letterBox.textContent = letterData.letter;
        letterBox.dataset.letterIndex = index; // Store index for selection

        // Mark as selected if it matches the current selectedLetterData
        if (selectedLetterData && letterData.letter === selectedLetterData.letter) {
            letterBox.classList.add('selected');
        }

        letterBox.addEventListener('click', () => {
            // Remove 'selected' from previously selected letter
            const currentlySelected = letterRowDisplay.querySelector('.level1-letter-box.selected');
            if (currentlySelected) {
                currentlySelected.classList.remove('selected');
            }

            // Add 'selected' to the clicked letter
            letterBox.classList.add('selected');
            selectedLetterData = letterData; // Update global selected letter data
            playLetterAudio(letterData.soundText); // Play letter sound
            renderPicturesForLetter(letterData); // Render pictures for this letter
        });
        letterRowDisplay.appendChild(letterBox);
    });

    // ALWAYS render pictures for the currently selected letter after the row is built
    if (selectedLetterData) {
        renderPicturesForLetter(selectedLetterData);
    }

    // Update navigation button states
    document.getElementById('prev-row-btn').disabled = currentAlphabetRowIndex === 0;
    document.getElementById('next-row-btn').disabled = currentAlphabetRowIndex === level1AlphabetData.length - 1;
}

/**
 * Renders pictures for the given letter data in Level 1.
 * @param {Object} letterData The data object for the selected letter.
 */
function renderPicturesForLetter(letterData) {
    const pictureDisplay = document.getElementById('picture-display');
    pictureDisplay.innerHTML = ''; // Clear previous pictures

    // Do NOT shuffle the words for the current letter to maintain fixed order
    const orderedWords = [...letterData.words]; // Use a copy to ensure original data is not modified

    // Only display 3 to 5 pictures (or fewer if not enough words)
    const numPicturesToShow = Math.min(orderedWords.length, Math.floor(Math.random() * 3) + 3); // Randomly 3, 4, or 5

    for (let i = 0; i < numPicturesToShow; i++) {
        const wordData = orderedWords[i]; // Use orderedWords instead of shuffledWords
        const pictureItem = document.createElement('div');
        pictureItem.classList.add('level1-picture-item');

        const emojiSpan = document.createElement('span');
        emojiSpan.classList.add('emoji');
        emojiSpan.textContent = wordData.emoji;
        pictureItem.appendChild(emojiSpan);

        const englishWordSpan = document.createElement('span');
        englishWordSpan.classList.add('english-word');
        englishWordSpan.textContent = wordData.englishWord; // This property already holds the transliterated Marathi word
        pictureItem.appendChild(englishWordSpan);

        pictureItem.addEventListener('click', () => {
            playWordAudio(wordData.audioText); // Play word sound
        });
        pictureDisplay.appendChild(pictureItem);
    }
}

/**
 * Handles navigation between alphabet rows in Level 1.
 * @param {number} direction -1 for previous, 1 for next.
 */
function navigateAlphabetRows(direction) {
    currentAlphabetRowIndex += direction;
    if (currentAlphabetRowIndex < 0) {
        currentAlphabetRowIndex = 0;
    } else if (currentAlphabetRowIndex >= level1AlphabetData.length) {
        currentAlphabetRowIndex = level1AlphabetData.length - 1;
    }
    // After changing row, reset selected letter to the first one in the new row
    selectedLetterData = level1AlphabetData[currentAlphabetRowIndex][0]; // This line ensures the first letter of the new row is selected
    renderAlphabetRow(); // Re-render the row and pictures
}

// --- Level 3 Specific Functions ---

/**
 * Loads and displays the current challenge for Level 3.
 */
function loadNextLevel3Challenge() {
    // Reset feedback and next button
    level3FeedbackMessageElement.textContent = '';
    level3NextButton.style.display = 'none';
    level3OptionsContainer.innerHTML = ''; // Clear previous options

    // If all challenges in the shuffled list have been presented, reshuffle
    if (currentLevel3ChallengeIndex >= shuffledLevel3GameData.length) {
        shuffledLevel3GameData = shuffleArray([...level3GameData]); // Reshuffle
        currentLevel3ChallengeIndex = 0; // Reset index
        console.log('All Level 3 challenges completed. Reshuffling for new round.');
    }

    currentLevel3Challenge = shuffledLevel3GameData[currentLevel3ChallengeIndex];

    // Update picture display - now showing English transliteration
    level3PictureDisplay.innerHTML = `
        <span class="emoji">${currentLevel3Challenge.emoji}</span>
        <span class="marathi-word">${currentLevel3Challenge.englishWord}</span> <!-- Changed to englishWord -->
    `;
    // Re-attach click listener for the picture display
    level3PictureDisplay.onclick = () => playWordAudio(currentLevel3Challenge.audioText);

    // Create options
    const shuffledOptions = shuffleArray([...currentLevel3Challenge.options]);
    shuffledOptions.forEach(option => {
        const optionBox = document.createElement('div');
        optionBox.classList.add('level3-option-box');
        optionBox.textContent = option;
        optionBox.dataset.value = option; // Store the option value
        optionBox.addEventListener('click', handleLevel3OptionClick);
        level3OptionsContainer.appendChild(optionBox);
    });
}

/**
 * Handles click on a Level 3 option box.
 * @param {Event} e The click event.
 */
function handleLevel3OptionClick(e) {
    const clickedOption = e.currentTarget;
    const selectedValue = clickedOption.dataset.value;

    // Remove previous feedback classes from all options
    Array.from(level3OptionsContainer.children).forEach(option => {
        option.classList.remove('selected', 'correct', 'incorrect');
    });

    clickedOption.classList.add('selected'); // Highlight selected option

    if (selectedValue === currentLevel3Challenge.correctLetter) {
        clickedOption.classList.add('correct');
        level3FeedbackMessageElement.textContent = 'рдмрд░реЛрдмрд░! (Correct!)';
        level3NextButton.style.display = 'block'; // Show next button
        // Disable all options after correct answer
        Array.from(level3OptionsContainer.children).forEach(option => {
            option.removeEventListener('click', handleLevel3OptionClick);
        });
    } else {
        clickedOption.classList.add('incorrect');
        level3FeedbackMessageElement.textContent = 'рдЪреБрдХреАрдЪреЗ! рдкреБрдиреНрд╣рд╛ рдкреНрд░рдпрддреНрди рдХрд░рд╛. (Incorrect! Try again.)';
        playWordAudio(selectedValue); // Play the sound of the incorrect option tapped
        // Allow user to re-select
        setTimeout(() => {
            clickedOption.classList.remove('selected', 'incorrect');
            level3FeedbackMessageElement.textContent = '';
        }, 800);
    }
}

/**
 * Advances to the next challenge in Level 3.
 */
function nextLevel3Challenge() {
    currentLevel3ChallengeIndex++;
    loadNextLevel3Challenge();
}

// --- Level Management Logic (Main App) ---
const level1HTML = `
    <div class="level1-container">
        <div id="letter-row-display" class="letter-row-display"></div>
        <div class="navigation-buttons">
            <button id="prev-row-btn" class="nav-button">тЖР</button>
            <button id="next-row-btn" class="nav-button">тЖТ</button>
        </div>
        <div id="picture-display" class="picture-display"></div>
    </div>
`;

// The HTML structure for Level 2 (the current game)
const level2GameHTML = `
    <div class="game-container">
        <div class="columns-wrapper">
            <div id="pictures-section" class="pictures-section"></div>
            <div id="letters-section" class="letters-section"></div>
        </div>
        <svg id="match-lines-svg" class="match-lines-svg"></svg>
        <div class="w-full flex flex-col items-center">
            <div class="buttons-container">
                <button id="reset-btn" class="game-button">рдкреБрдиреНрд╣рд╛ рдЦреЗрд│рд╛ (Play Again)</button>
            </div>
            <div id="feedback-message" class="feedback-message"></div>
        </div>
    </div>
`;

const level3HTML = `
    <div class="level3-container">
        <div class="level3-challenge-area">
            <div id="level3-picture-display" class="level3-picture-display">
                <!-- Picture and Marathi word will be loaded here -->
            </div>
            <div id="level3-options-container" class="level3-options-container">
                <!-- Options will be loaded here -->
            </div>
            <button id="level3-next-button" class="level3-next-button" style="display:none;">рдкреБрдвреАрд▓ (Next)</button>
            <div id="level3-feedback-message" class="level3-feedback-message"></div>
        </div>
    </div>
`;

const placeholderHTML = `
    <div class="placeholder-level">
        <p>Coming Soon!</p>
        <p>рдирд╡реАрди рд╕реНрддрд░ рд▓рд╡рдХрд░рдЪ рдпреЗрдд рдЖрд╣реЗрдд!</p>
    </div>
`;

function renderLevel(level) {
    // Set the dropdown value to the current level
    if (levelSelectDropdown) {
        levelSelectDropdown.value = level;
    }

    // Clear previous content
    levelContentDiv.innerHTML = '';
    // Reset global DOM element references specific to levels
    // Level 2 elements
    lettersSection = null;
    picturesSection = null;
    feedbackMessage = null;
    resetBtn = null;
    svgElement = null;
    activeLines = [];
    // Level 1 elements (no need to reset these as they are dynamically created within renderLevel1)
    currentAlphabetRowIndex = 0; // Reset Level 1 row index
    selectedLetterData = null; // Reset Level 1 selected letter
    // Level 3 elements
    currentLevel3ChallengeIndex = 0;
    shuffledLevel3GameData = []; // Clear and re-shuffle for Level 3
    currentLevel3Challenge = null;
    level3FeedbackMessageElement = null;
    level3NextButton = null;
    level3OptionsContainer = null;
    level3PictureDisplay = null;


    if (level === 1) {
        levelContentDiv.innerHTML = level1HTML;
        // Attach Level 1 specific event listeners after rendering HTML
        document.getElementById('prev-row-btn').addEventListener('click', () => navigateAlphabetRows(-1));
        document.getElementById('next-row-btn').addEventListener('click', () => navigateAlphabetRows(1));
        renderAlphabetRow(); // Initial render for Level 1
    } else if (level === 2) {
        levelContentDiv.innerHTML = level2GameHTML;
        // Re-assign DOM elements for Level 2 after it's rendered
        lettersSection = document.getElementById('letters-section');
        picturesSection = document.getElementById('pictures-section');
        feedbackMessage = document.getElementById('feedback-message');
        resetBtn = document.getElementById('reset-btn');
        svgElement = document.getElementById('match-lines-svg');
        initGame(); // Initialize the game for Level 2
    } else if (level === 3) {
        levelContentDiv.innerHTML = level3HTML;
        // Assign Level 3 DOM elements
        level3PictureDisplay = document.getElementById('level3-picture-display');
        level3OptionsContainer = document.getElementById('level3-options-container');
        level3FeedbackMessageElement = document.getElementById('level3-feedback-message');
        level3NextButton = document.getElementById('level3-next-button');

        // Shuffle Level 3 data once when the level is loaded
        shuffledLevel3GameData = shuffleArray([...level3GameData]);
        currentLevel3ChallengeIndex = 0; // Start from the beginning of the shuffled list

        level3NextButton.addEventListener('click', nextLevel3Challenge);
        loadNextLevel3Challenge(); // Start the first challenge for Level 3
    } else if (level === 4 || level === 5) {
        levelContentDiv.innerHTML = placeholderHTML;
    }
}

// Initialize the app when the DOM is fully loaded
document.addEventListener('DOMContentLoaded', (event) => {
    levelContentDiv = document.getElementById('level-content');
    levelSelectDropdown = document.getElementById('level-select-dropdown');

    // Attach event listener to the dropdown
    levelSelectDropdown.addEventListener('change', (e) => {
        renderLevel(parseInt(e.target.value));
    });

    // Render Level 1 initially (as it is now the default)
    renderLevel(1);
});
